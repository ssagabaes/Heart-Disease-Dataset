# -*- coding: utf-8 -*-
"""Report.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h3AFRPSnLoMNSlTffTkPkwEz-Gnour5W
"""

!gdown --id 18Hnc7memfERkzrxq-WcYZYPw_UaTYxpK

import tensorflow as tf 
import pandas as pd
import numpy as np

from tensorflow import keras

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras import datasets, layers, models
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.layers import Dense
from keras.layers import Dropout
from keras import regularizers
from keras.optimizers import Adam
from keras import backend as K
import matplotlib.pyplot as plt
from scipy.stats import norm
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve, auc
from sklearn.tree import DecisionTreeClassifier
from scipy import stats
from numpy import genfromtxt
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

df= pd.read_csv('/content/heart.csv')

class_names= ('Age', 'Sex', 'CP', 'Trestbps', 'Chol', 'FBS', 'RestECG','Thalach', 'Exang', 'Oldpeak', 'Slope', 'CA', 'Thal', 'Target')

df.head()

df.tail()

df.columns

df['target'].describe()

sns.distplot(df['target']);

print("Skewness: %f" % df['target'].skew())
print("Kurtosis: %f" % df['target'].kurt())

corr = df.corr()['target'].to_frame()
corr = corr.rename(columns={'target':'Correlation with the target variable'})
corr.sort_values(by='Correlation with the target variable',ascending=False)[1:]

plt.figure(figsize=(16,8))
plt.title('Correlation of Values in the Dataset')
a = sns.heatmap(df.corr(), square=True, annot=True, cmap='Set2')
plt.show()

plt.figure( figsize= (12,8) )
df[['age'] ].hist(bins=10)
plt.show()
# age count in the dataset.

plt.figure( figsize= (12,8) )
df[['trestbps'] ].hist(bins=10)
plt.show()
# resting blood pressure.

plt.figure( figsize= (12,8) )
df[['oldpeak'] ].hist(bins=10)
plt.show()
# ST depression induced by exercise relative to rest.

plt.figure( figsize= (12,8) )
df[['chol'] ].hist(bins=10)
plt.show()
# cholesterol count in the dataset.

plt.figure( figsize= (12,8) )
df[['fbs'] ].hist(bins=10)
plt.show()
# fasting blood sugar count in the dataset.

plt.figure( figsize= (12,8) )
df[['restecg'] ].hist(bins=10)
plt.show()
# resting ecg count in the dataset.

plt.figure( figsize= (12,8) )
df[['exang'] ].hist(bins=10)
plt.show()
# exercise induced angina in dataset.

plt.figure( figsize= (12,8) )
df[['ca'] ].hist(bins=10)
plt.show()
# number of major blood vessels in the dataset.

plt.figure( figsize= (12,8) )
df[['thal'] ].hist(bins=10)
plt.show()
# thalassemia count in the dataset.

fig, ax = plt.subplots(figsize=(12,8))
x = df['thalach']
plt.title("Maximum Heart Rate", size=18)
ax = sns.distplot(x)
plt.show()
# maximum heart rate achieved in dataset.

fig, ax = plt.subplots(figsize=(12, 8))
ax = sns.countplot(x="cp", hue="target", data=df, palette="Set2")
plt.title("Chest Pain Experienced in Heart Disease", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper right', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
x = ['Typical Angina', 'Atypical Angina', 'Non-Anginal Pain','Asymptomatic']
l = [0, 1, 2 ,3]
ax.set_xticks(l)
ax.set_xticklabels(x)
plt.xlabel('Chest Pain Experienced')
plt.show()
# data shows that those diagnosed with heart disease experienced non-anginal and atypical angina chest pain the most.

fig, ax = plt.subplots(figsize=(12, 8))
ax = sns.countplot(x="sex", hue="target", data=df, palette="Set2")
plt.title("Sex Difference in Heart Disease", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper left', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
x = ['Female', 'Male']
l = [0, 1]
ax.set_xticks(l)
ax.set_xticklabels(x)
plt.show()
# data shows that men have been diagnosed with heart disease more than women, however, the ratio regarding the latter seems to skew to more women being diagnosed.

fig, ax = plt.subplots(figsize=(50, 8))
ax = sns.countplot(x="thalach", hue="target", data=df, palette="Set2")
plt.title("Maximum Heart Rate Achieved", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper left', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
plt.show()
# people with a higher heart rate are more likely to have heart disease.

fig, ax = plt.subplots(figsize=(12, 8))
ax = sns.countplot(x="restecg", hue="target", data=df, palette="Set2")
plt.title(" Resting Electrocardiographic measurement", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper left', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
x = ['Normal', 'ST-T Wave Abnormality', 'Probable Ventricular Hypertrophy' ]
l = [0, 1, 2]
ax.set_xticks(l)
ax.set_xticklabels(x)
plt.show()
# those with heart disease are more than 96% likely to obtain ST-T wave abnormality.

fig, ax = plt.subplots(figsize=(12, 8))
ax = sns.countplot(x="ca", hue="target", data=df, palette="Set2")
plt.title(" Number of Major Vessels ", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper right', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
x = ['0', '1', '2', '3', '4' ]
l = [0, 1, 2, 3, 4]
ax.set_xticks(l)
ax.set_xticklabels(x)
plt.show()

fig, ax = plt.subplots(figsize=(12, 8))
ax = sns.countplot(x="exang", hue="target", data=df, palette="Set2")
plt.title("Exercise Induced Angina", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper left', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
x = ['No', 'Yes']
l = [0, 1]
ax.set_xticks(l)
ax.set_xticklabels(x)
plt.show()

fig, ax = plt.subplots(figsize=(12, 8))
ax = sns.countplot(x="fbs", hue="target", data=df, palette="Set2")
plt.title("Fasting Blood Sugar > 120 mg/dl in Heart Disease", size=18)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper right', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
x = ['False', 'True']
l = [0, 1]
ax.set_xticks(l)
ax.set_xticklabels(x)
plt.xlabel('Blood Sugar')
plt.show()
# heart disease shows an inverse relationship or weakly associated relationship to fasting blood sugar.

z = sns.displot(data=df, x="age", hue="target", element="step", palette="Set1")
z._legend.remove()
plt.title("Age Vs. Heart Disease", size=18)
plt.xticks(size=14)
plt.yticks(size=14)
plt.legend(title='Heart Disease', loc='upper left', labels=['Yes', 'No'])
plt.show()
# heart disease peaks around 40 years old, as well as a cluster of ages between 50 and 55.

fig, ax = plt.figure(figsize = (15, 6))
ax = sns.scatterplot(x='thalach', y='cp', hue='target',data=df)
leg = plt.legend()
ax.get_legend().remove()
plt.legend(title='Heart Disease', loc='upper left', labels=['No', 'Yes'])
plt.xticks(size=14)
plt.yticks(size=14)
plt.title("Thalach Vs. Chest Pain Vs. Heart Disease", size=18)
plt.show()
# thalach vs chest pain vs heart disease.

y = df["target"]
X = df.drop('target',axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state = 42)
# splitting the data to a 30:70 ratio.

X_test.shape

X_train.shape

y_test.shape

y_train.shape

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
# scaling the data down.

model = Sequential()
model.add(Dense(activation = "relu", input_dim = 13, units = 12, kernel_initializer = "uniform", name="layer1"))
model.add(Dense(activation = "relu", units = 12, kernel_initializer = "uniform", name="layer2"))
model.add(Dense(activation = "sigmoid", units = 1, kernel_initializer = "uniform", name="layer3"))
model.compile(optimizer = 'adam' , loss = 'binary_crossentropy', metrics = ['accuracy'] )
# units represents the number of neurons in the respective layer, output layer has 1 or 0 respectively either indicating yes or no.

emodel = model.fit(X_train , y_train, epochs = 20, validation_data = (X_test, y_test))
# training the model using the training set and using the test data as a validation set to see how the model runs with data it has not seen.

plt.plot(emodel.history['accuracy'])
plt.plot(emodel.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Training Data', 'Testing Data'], loc='lower right')
plt.show()

plt.plot(emodel.history['loss'])
plt.plot(emodel.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Training Data', 'Testing Data'], loc='lower right')
plt.show()

zmodel = (model.predict(X_test) >= 0.5)
# testing it with a 0.5 final neuron activation for the test set data.

conf_mat = confusion_matrix(y_test, zmodel)
print(conf_mat)
# confusion matrix for this specific model.

total = sum(sum(conf_mat))
accuracy = (conf_mat[0, 0] + conf_mat[1, 1])/total
specificity = conf_mat[1, 1]/(conf_mat[1, 1] + conf_mat[0, 1])
sensitivity = conf_mat[0, 0]/(conf_mat[0, 0] + conf_mat[1, 0])
error_rate = (conf_mat[0,1] + conf_mat[1,0]) / total
recall = conf_mat[1,1]/ (conf_mat[1,1] + conf_mat[1,0])
auc = roc_auc_score(y_test, zmodel)

print('accuracy : ', accuracy*100)
print('specificity : ', specificity*100)
print('sensitivity : ', sensitivity*100)
print('error rate : ', error_rate*100)
print('recall : ', recall*100)
print('AUC: ', auc*100)
# metrics used to determine the performance of the specific model.

cfm = [[34, 7],
       [6, 44]]
classes = ["0", "1"]

df_cfm = pd.DataFrame(cfm, index = classes, columns = classes)
plt.figure(figsize = (12,8))
plt.title('Confusion Matrix')
cfm_plot = sns.heatmap(df_cfm, annot=True, cmap='Pastel2')
# plot confusion matrix and visualization.
